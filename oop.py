# -*- coding: utf-8 -*-
"""oop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lCWghdZq9OLsaXHvIU5pPkjTdnVt_d-2
"""

# 1. Import library
import pandas as pd
import numpy as np
import joblib  # Ganti pickle dengan joblib untuk kompresi
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# 2. Buat class OOP
class HotelBookingModel:
    def __init__(self):
        self.encoder = None
        self.scaler = None
        self.model = None
        self.categorical_cols = None
        self.feature_names = None  # To store the feature names

    def preprocess(self, df):
        df = df.drop(columns=["Booking_ID"], errors="ignore")
        df['type_of_meal_plan'] = df['type_of_meal_plan'].fillna(df['type_of_meal_plan'].mode()[0])
        df['avg_price_per_room'] = df['avg_price_per_room'].fillna(df['avg_price_per_room'].median())
        df['required_car_parking_space'] = df['required_car_parking_space'].fillna(df['required_car_parking_space'].mode()[0])

        for col in ['lead_time', 'avg_price_per_room']:
            q1 = df[col].quantile(0.25)
            q3 = df[col].quantile(0.75)
            iqr = q3 - q1
            df[col] = df[col].clip(lower=q1 - 1.5*iqr, upper=q3 + 1.5*iqr)

        df['arrival_date'] = pd.to_datetime(df['arrival_date'].astype(str), format='%d', errors='coerce')
        df['arrival_dayofweek'] = df['arrival_date'].dt.dayofweek
        df = df.drop('arrival_date', axis=1)

        self.categorical_cols = df.select_dtypes(include='object').columns.tolist()
        if 'booking_status' in self.categorical_cols:
            self.categorical_cols.remove('booking_status')

        self.encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
        encoded_features = self.encoder.fit_transform(df[self.categorical_cols])
        encoded_df = pd.DataFrame(encoded_features, columns=self.encoder.get_feature_names_out(self.categorical_cols))

        numerical_cols = df.select_dtypes(include='number').columns.tolist()
        df_encoded = pd.concat([df[numerical_cols], encoded_df, df['booking_status']], axis=1)

        self.feature_names = df_encoded.columns.tolist()  # Save the feature names

        return df_encoded

    def train(self, df):
        df_processed = self.preprocess(df)
        X = df_processed.drop('booking_status', axis=1)
        y = df_processed['booking_status'].map({'Not_Canceled': 0, 'Canceled': 1})

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

        self.scaler = StandardScaler()
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)

        self.model = RandomForestClassifier(n_estimators=50, random_state=42)
        self.model.fit(X_train_scaled, y_train)

        y_pred = self.model.predict(X_test_scaled)
        return self.evaluate(y_test, y_pred)

    def evaluate(self, y_true, y_pred):
        return {
            'accuracy': accuracy_score(y_true, y_pred),
            'precision': precision_score(y_true, y_pred, average='weighted'),
            'recall': recall_score(y_true, y_pred, average='weighted'),
            'f1_score': f1_score(y_true, y_pred, average='weighted'),
        }

    def save_model_parts(self):
        # Save model, scaler, encoder, and metadata (including feature names) with compression using joblib
        joblib.dump(self.model, "model.pkl", compress=3)
        joblib.dump(self.scaler, "scaler.pkl", compress=3)
        joblib.dump(self.encoder, "encoder.pkl", compress=3)
        joblib.dump(self.categorical_cols, "meta.pkl", compress=3)
        joblib.dump(self.feature_names, "feature_names.pkl", compress=3)  # Save feature names

    def predict(self, input_df):  # ⬅️ Tambahkan di sini
        # Encode categorical variables
        encoded_features = self.encoder.transform(input_df[self.categorical_cols])
        encoded_df = pd.DataFrame(encoded_features, columns=self.encoder.get_feature_names_out(self.categorical_cols))

        # Gabungkan dengan kolom numerik
        numerical_cols = input_df.select_dtypes(include='number').columns.tolist()
        df_encoded = pd.concat([input_df[numerical_cols], encoded_df], axis=1)

        # Pastikan kolom urutannya sesuai dengan saat training
        df_encoded = df_encoded.reindex(columns=self.feature_names[:-1], fill_value=0)

        # Scaling
        scaled_input = self.scaler.transform(df_encoded)

        # Prediksi
        prediction = self.model.predict(scaled_input)
        proba = self.model.predict_proba(scaled_input)

        return prediction[0], proba[0][prediction[0]]

