# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGD-JuQ-vsGfOGzgbUR1-Ls7hyYa6aIq
"""

import streamlit as st
import pandas as pd
import joblib

# Load model dan tools
model = joblib.load("model.pkl")
scaler = joblib.load("scaler.pkl")
encoder = joblib.load("encoder.pkl")
categorical_cols = joblib.load("meta.pkl")
feature_names = joblib.load("feature_names.pkl")

class HotelBookingModelWrapper:
    def __init__(self, model, scaler, encoder, categorical_cols, feature_names):
        self.model = model
        self.scaler = scaler
        self.encoder = encoder
        self.categorical_cols = categorical_cols
        self.feature_names = feature_names

    def predict(self, input_df):
        encoded_features = self.encoder.transform(input_df[self.categorical_cols])
        encoded_df = pd.DataFrame(encoded_features, columns=self.encoder.get_feature_names_out(self.categorical_cols))
        numerical_cols = input_df.select_dtypes(include='number').columns.tolist()
        df_encoded = pd.concat([input_df[numerical_cols], encoded_df], axis=1)
        df_encoded = df_encoded.reindex(columns=self.feature_names[:-1], fill_value=0)
        scaled_input = self.scaler.transform(df_encoded)
        prediction = self.model.predict(scaled_input)
        proba = self.model.predict_proba(scaled_input)
        return prediction[0], proba[0][prediction[0]]

# Instance wrapper
model_wrapper = HotelBookingModelWrapper(model, scaler, encoder, categorical_cols, feature_names)

# --- Streamlit UI ---
st.title("üîç Prediksi Booking Hotel: Canceled atau Tidak")

st.markdown("Isi form atau gunakan tombol di bawah untuk mencoba test case yang sudah disiapkan:")

# Test case default values
default_values = {
    "no_of_adults": 2,
    "no_of_children": 0,
    "no_of_weekend_nights": 1,
    "no_of_week_nights": 2,
    "type_of_meal_plan": "Meal Plan 1",
    "required_car_parking_space": 0,
    "room_type_reserved": "Room_Type 1",
    "lead_time": 50,
    "arrival_year": 2017,
    "arrival_month": 6,
    "arrival_date": 15,
    "market_segment_type": "Online",
    "repeated_guest": 0,
    "no_of_previous_cancellations": 0,
    "no_of_previous_bookings_not_canceled": 1,
    "avg_price_per_room": 100.0,
    "no_of_special_requests": 1
}

test_case_2 = {
    "no_of_adults": 1,
    "no_of_children": 1,
    "no_of_weekend_nights": 2,
    "no_of_week_nights": 5,
    "type_of_meal_plan": "Not Selected",
    "required_car_parking_space": 1,
    "room_type_reserved": "Room_Type 3",
    "lead_time": 300,
    "arrival_year": 2017,
    "arrival_month": 12,
    "arrival_date": 25,
    "market_segment_type": "Offline",
    "repeated_guest": 0,
    "no_of_previous_cancellations": 2,
    "no_of_previous_bookings_not_canceled": 0,
    "avg_price_per_room": 200.0,
    "no_of_special_requests": 0
}

# Pilihan test case
col1, col2 = st.columns(2)
if col1.button("üîπ Gunakan Test Case 1 (Not Canceled)"):
    st.session_state["test_input"] = default_values
if col2.button("üî∏ Gunakan Test Case 2 (Canceled)"):
    st.session_state["test_input"] = test_case_2

# Gunakan session state jika tersedia
input_data = st.session_state.get("test_input", default_values)

with st.form("prediction_form"):
    no_of_adults = st.number_input("Jumlah Dewasa", 1, 10, input_data["no_of_adults"])
    no_of_children = st.number_input("Jumlah Anak", 0, 10, input_data["no_of_children"])
    no_of_weekend_nights = st.number_input("Malam Akhir Pekan", 0, 10, input_data["no_of_weekend_nights"])
    no_of_week_nights = st.number_input("Malam Hari Kerja", 0, 20, input_data["no_of_week_nights"])
    type_of_meal_plan = st.selectbox("Meal Plan", ["Meal Plan 1", "Meal Plan 2", "Not Selected"], index=["Meal Plan 1", "Meal Plan 2", "Not Selected"].index(input_data["type_of_meal_plan"]))
    required_car_parking_space = st.selectbox("Butuh Parkir?", [0, 1], index=[0, 1].index(input_data["required_car_parking_space"]))
    room_type_reserved = st.selectbox("Tipe Kamar", ["Room_Type 1", "Room_Type 2", "Room_Type 3"], index=["Room_Type 1", "Room_Type 2", "Room_Type 3"].index(input_data["room_type_reserved"]))
    lead_time = st.number_input("Lead Time (hari)", 0, 500, input_data["lead_time"])
    arrival_year = st.selectbox("Tahun Kedatangan", [2017], index=[2017].index(input_data["arrival_year"]))
    arrival_month = st.selectbox("Bulan Kedatangan", list(range(1, 13)), index=input_data["arrival_month"] - 1)
    arrival_date = st.selectbox("Tanggal Kedatangan", list(range(1, 32)), index=input_data["arrival_date"] - 1)
    market_segment_type = st.selectbox("Segmentasi Pasar", ["Online", "Offline", "Corporate"], index=["Online", "Offline", "Corporate"].index(input_data["market_segment_type"]))
    repeated_guest = st.selectbox("Tamu Berulang?", [0, 1], index=[0, 1].index(input_data["repeated_guest"]))
    no_of_previous_cancellations = st.number_input("Jumlah Pembatalan Sebelumnya", 0, 10, input_data["no_of_previous_cancellations"])
    no_of_previous_bookings_not_canceled = st.number_input("Jumlah Booking Tidak Dibatalkan", 0, 10, input_data["no_of_previous_bookings_not_canceled"])
    avg_price_per_room = st.number_input("Harga Rata-Rata per Kamar", 0.0, 10000.0, input_data["avg_price_per_room"])
    no_of_special_requests = st.number_input("Permintaan Khusus", 0, 5, input_data["no_of_special_requests"])

    submitted = st.form_submit_button("Prediksi")

if submitted:
    input_df = pd.DataFrame([{
        "no_of_adults": no_of_adults,
        "no_of_children": no_of_children,
        "no_of_weekend_nights": no_of_weekend_nights,
        "no_of_week_nights": no_of_week_nights,
        "type_of_meal_plan": type_of_meal_plan,
        "required_car_parking_space": required_car_parking_space,
        "room_type_reserved": room_type_reserved,
        "lead_time": lead_time,
        "arrival_year": arrival_year,
        "arrival_month": arrival_month,
        "arrival_date": arrival_date,
        "market_segment_type": market_segment_type,
        "repeated_guest": repeated_guest,
        "no_of_previous_cancellations": no_of_previous_cancellations,
        "no_of_previous_bookings_not_canceled": no_of_previous_bookings_not_canceled,
        "avg_price_per_room": avg_price_per_room,
        "no_of_special_requests": no_of_special_requests
    }])

    input_df['arrival_date'] = pd.to_datetime(input_df['arrival_date'].astype(str), format='%d', errors='coerce')
    input_df['arrival_dayofweek'] = input_df['arrival_date'].dt.dayofweek
    input_df.drop('arrival_date', axis=1, inplace=True)

    prediction, proba = model_wrapper.predict(input_df)
    label = "Canceled" if prediction == 1 else "Not Canceled"

    st.subheader("üéØ Hasil Prediksi")
    st.success(f"üìå Prediksi: **{label}** (Probabilitas: {proba:.2f})")

